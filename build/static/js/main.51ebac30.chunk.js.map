{"version":3,"sources":["TodosService.js","App.js","serviceWorker.js","index.js"],"names":["TodosService","add","name","axios","post","then","response","data","get","toggle","id","completed","put","concat","Loading","react_default","a","createElement","className","App","_useState","useState","_useState2","Object","slicedToArray","loaded","setLoaded","_useState3","_useState4","setError","_useState5","_useState6","todos","setTodos","getTodos","useCallback","inputRef","useRef","useEffect","Fragment","react_toastify","onSubmit","e","preventDefault","current","value","toast","error","newTodo","toConsumableArray","console","log","ref","placeholder","htmlFor","map","task","key","_id","clsx","done","onClick","todoIndex","findIndex","t","todo","objectSpread","slice","lengrh","type","App_Loading","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.51ebac30.chunk.js","sourcesContent":["import axios from \"axios\";\nconst endpoint = \"/todos\";\nconst toggle = (id, completed) =>\n  axios.put(`${endpoint}/${id}`, { completed }).then(response => response.data);\n\nconst get = () => axios.get(endpoint).then(response => response.data);\n\nconst add = name =>\n  axios\n    .post(endpoint, {\n      name\n    })\n    .then(response => response.data);\n\nconst TodosService = {\n  add,\n  get,\n  toggle\n};\nexport default TodosService;\n","import React, { useRef, useState, useEffect, useCallback } from \"react\";\nimport \"./App.css\";\nimport clsx from \"clsx\";\nimport TodosService from \"./TodosService\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nconst Loading = () => (\n  <div className=\"loading\">\n    <i className=\"fas fa-circle-notch fa-spin fa-3x\" />\n  </div>\n);\n\nfunction App() {\n  const [loaded, setLoaded] = useState(false);\n  const [error, setError] = useState(false);\n  const [todos, setTodos] = useState([]);\n\n  const getTodos = useCallback(() => {\n    TodosService.get().then(todos => {\n      setLoaded(true);\n      setTodos(todos);\n      setError(false);\n    });\n  }, [setLoaded, setTodos, setError]);\n\n  const toggleTask = id => () => {\n    console.log(\"clicked\");\n    setTodos(todos => {\n      const todoIndex = todos.findIndex(t => t._id === id);\n      const todo = {\n        ...todos[todoIndex],\n        completed: !todos[todoIndex].completed\n      };\n      TodosService.toggle(id, todo.completed).then(getTodos);\n      return [\n        ...todos.slice(0, todoIndex),\n        todo,\n        ...todos.slice(todoIndex + 1, todos.lengrh)\n      ];\n    });\n  };\n\n  const inputRef = useRef(null);\n\n  const addTask = e => {\n    e.preventDefault();\n    const name = inputRef.current.value;\n    if (!name) {\n      toast.error(\"Debe ingresar una tarea\");\n      return null;\n    }\n    TodosService.add(name).then(newTodo => {\n      setTodos(todos => [...todos, newTodo]);\n    });\n    console.log(inputRef.current.value);\n  };\n\n  useEffect(() => getTodos(), [getTodos]);\n\n  return (\n    <>\n      <ToastContainer />\n      <div className=\"wrapper\">\n        <div className=\"wrapper__inner\">\n          <div className=\"notepad\">\n            <h1 className=\"notepad__heading\">Todo List</h1>\n            <form className=\"notepad__form\" onSubmit={addTask}>\n              <input\n                ref={inputRef}\n                className=\"notepad__form-input\"\n                placeholder=\"EscribÃ­ una tarea\"\n                id=\"form-input\"\n              />\n              <label className=\"notepad__form-label\" htmlFor=\"form-input\">\n                Agregar un item\n              </label>\n            </form>\n            {!loaded ? (\n              <Loading />\n            ) : (\n              <ul className=\"notepad__list\">\n                {todos.map(task => (\n                  <li className=\"notepad__list-item\" key={task._id}>\n                    <button\n                      className={clsx({ done: task.completed })}\n                      onClick={toggleTask(task._id)}\n                      type=\"button\"\n                    >\n                      {task.name}\n                    </button>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (\"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}